--<AddNewHotel>--
Create or replace Procedure AddNewHotel (
    hotel_name              in  varchar2, -- input param to identify the hotel by it's name.
    street                  in  varchar2, -- input param to identify the street the hotel is on.
    city                    in  varchar2, -- input param to identify the city the hotel is in.
    hotel_state             in  varchar2, -- input param to identify the state the hotel is in.
    hotel_phone             in  varchar2)   -- input param to add the hotel's phone number.
    as 
    
    count_rows                  number;   -- counts the quantity of rows in the hotel table.
    h_id                        number;   -- number for next hotel id in the database.
    hotel_status                varchar2(50) := 'Owned'; --the status of the hotel is now "owned", by default. This is so it can be "sold" later on.
    
    Duplicate_phone_Exception   exception;--a user defined exception that is raised
    errorCode                   integer := 0;
    
    rm_num                      number := 0;
    h_phonenum                  varchar2(50);
Begin
    select count(rownum) into count_rows from hotel; --find number of rows in the hotel table.
    if (count_rows > 0) then
        for i in 1..count_rows 
        loop                                             --loop through the hotel table to check if there is an identical phone number that already exists in the table.
            select phone into h_phonenum
            from hotel where hotelBranchID = i;
            if (h_phonenum = hotel_phone) then
                raise Duplicate_phone_Exception;         --raise exception for duplicate phone number.
                errorCode := -1;
                exit;
            end if;
        end loop;
    end if;
    
    if (errorCode != 1) then                         --if the exception is not raised, then proceed to insert the new hotel's info into the table.
        h_id := hotelBranchID.nextval;
        Insert Into hotel values (h_id, city, street, hotel_state, hotel_phone, hotel_status, hotel_name);
        
        --adding rooms : 50 singles, 20 doubles, 5 suites, 2 conferences
        for i in 1..50 loop
            rm_num := rm_num + 1;
            insert into rooms values(roomID.nextval, rm_num, 'Single', h_id);
        end loop;
        
        for i in 1..20 loop
            rm_num := rm_num + 1;
            insert into rooms values(roomID.nextval, rm_num, 'Double', h_id);
        end loop;
        
        for i in 1..5 loop
            rm_num := rm_num + 1;
            insert into rooms values(roomID.nextval, rm_num, 'Suite', h_id);
        end loop;
        
        for i in 1..2 loop
            rm_num := rm_num + 1;
            insert into rooms values(roomID.nextval, rm_num, 'Conference', h_id);
        end loop;
        
        dbms_output.put_line('A new Hotel '|| hotel_name || ' was created in ' || hotel_state);
    end if;
Exception                                            --handle exception, print out message that notifies the user of the duplicate phone number.
    when Duplicate_phone_Exception then
    dbms_output.put_line('The phone number you entered already exists in the database.');
End AddNewHotel;

--<FindHotel>--
Create or replace Procedure FindHotel (
    hotel_name             in  varchar2) -- input param to identify the state the hotel is in.
    as
    hotel_id                number; -- output that will be returned for hotels with a matching address as the user input.
    errorCode               number := -1; -- output returns 0 if a match was found, negative number if no match was found.
    
    ch_name                varchar2(50);
    
    No_match_found          exception;
    counter                 number;
Begin
    select hotelBranchID into hotel_ID 
    from hotel
    where hotelName = hotel_name;

    select count(rownum) into counter from hotel; --find number of rows in the hotel table.
    for i in 1..counter loop                     --loop for as many rows in the hotel table to check each row's values one by one.
        select hotelName into ch_name from hotel where hotelBranchID = i;
        if (ch_name = hotel_name) then                               --check if the ch_name in the current row of table the loop is on is identical to the hotelName parameter.
            hotel_id := i;                                          --once all checks have been confirmed, the address matches and the current i that
            errorCode := 0;                                         --the loop is on is the hotel we are looking for. there is no error, so errorCode is set to 0.
            exit;                                                   --leave the loop.
        end if;
    end loop;   
    if (errorCode != -1) then                       --if the errorCode was changed so it is no longer an error, msg output the hotel id that was found.
        dbms_output.put_line('A Hotel with a matching name was found in the database. Hotel ID: '|| hotel_id);
    else
        raise No_match_found;                      --exception raised if no match was found, since the errorCode was not changed.
    end if;
Exception
    when No_match_found then                       --exception prints out a message that no match was found.
    dbms_output.put_line('No hotel found with matching name.');
End FindHotel;









--<AddRoomtoHotel>--
Create or replace Procedure AddRoomtoHotel (
    hotel_name          IN varchar2,   -- input param to identify the hotel ID of the hotel that will be given more rooms.
    roomType            IN varchar2,   -- input param to identify what type of room will be added to the hotel. -- Single, Double, Suite, Conference
    room_Quantity       IN number)   -- input param to determine the quantity of rooms of the chosen type will be added to the hotel.
    as
    
    --count_rows                  number;   -- counts the quantity of rows in the rooms table.
    count_name_found              number;   -- count number of id the same as hotel_id found in the table.
    next_id                     number;   -- the number of the id for the new room that is going to added into the table.
    rm_num                      number;   -- variable used to create room numbers.
    
    hotel_id                    number;
    errorCode                   integer := 0; -- return a negative number for errors. default 0.
    Hotel_name_not_Found          exception;    -- exception for when hotel_name requested does not exist in the database.
Begin
    select count(hotelName) into count_name_found from hotel where hotelName = hotel_name;
    if (count_name_found = 0) then
        raise Hotel_name_not_Found;
        errorCode := -1;
    else
        select hotelBranchID into hotel_id from hotel where hotelName = hotel_name;
        select count(roomnum) into rm_num from rooms where hotelBranchID = hotel_id;
        for i in 1..room_Quantity loop
            rm_num := rm_num + 1;
            insert into rooms values(roomID.nextval, rm_num, roomType, hotel_id);
            --dbms_output.put_line('Room ID: '||next_id||', Room Type: '||roomType||', Quantity: '||i);          
        end loop;
        dbms_output.put_line( room_Quantity || ' ' || roomType || ' room[s] added successfully');
    end if;

Exception
    when Hotel_name_not_Found then
    dbms_output.put_line('No hotel found with matching name: '||hotel_name);
End AddRoomtoHotel;

--<SellExistingHotel>--
Create or replace Procedure SellExistingHotel (
    hotel_name   IN varchar2)      -- input param to identify the specific hotel being sold.
    as
    
    cursor hotel_cursor is
    select city, street, state_, phone, hotelStatus, hotelBranchID
    from hotel
    where hotelName = hotel_name;
    
    h_row hotel_cursor%rowtype;
    
    errorCheck             number;        -- variable used to check for number of rows returned from implicit cursor
    Hotel_name_not_Found   exception;     -- exception for when hotel_name requested does not exist in the database.
Begin
    
    select count(hotelName) into errorCheck
    from hotel
    where hotelName = hotel_name;
    
    if (errorCheck != 1) then
        raise hotel_name_not_found;
    else
        open hotel_cursor;
        fetch hotel_cursor into h_row;
        dbms_output.put_line('Hotel being sold: ' || hotel_name);
        dbms_output.put_line('Hotel ID: ' || h_row.hotelBranchID);
        dbms_output.put_line('Location: ' || h_row.street || ', ' || h_row.city || ', ' || h_row.state_);
        dbms_output.put_line('Phone number: ' || h_row.phone);
        
        update hotel set hotelStatus = 'Sold'
        where hotelName = hotel_name;
        
        dbms_output.put_line('Hotel status is: Sold');
        close hotel_cursor;
    end if;
Exception
    when Hotel_name_not_Found then
        dbms_output.put_line('The Hotel Name requested was not found in the directory.');
End SellExistingHotel;




--<ReportHotelsInState>--
Create or replace Procedure ReportHotelsInState (
    in_state IN varchar2) -- input param to determine chosen state to look for hotels in.
    as
    
    cursor hotel_cursor is
    select hotelName, street, city, phone
    from hotel
    where state_ = in_state;
    
    h_row hotel_cursor%rowtype;
    
    errorCheck          integer;
    Hotel_not_found     exception;
Begin
    select count(*) into errorCheck from hotel
    where state_ = in_state;

    if (errorCheck > 0) then
        dbms_output.put_line('Hotels found in state: '|| in_state);
        open hotel_cursor;
        loop
            fetch hotel_cursor into h_row;
            
            exit when hotel_cursor%notfound;
            dbms_output.put_line('');
            dbms_output.put_line('Name:     '|| h_row.hotelName);
            dbms_output.put_line('Location: '|| h_row.street ||', '|| h_row.city);
            dbms_output.put_line('Phone:    '|| h_row.phone);
            dbms_output.put_line('');
        end loop;
        close hotel_cursor;
    else
        raise Hotel_not_found;
    end if;
Exception
    when Hotel_not_found then
        dbms_output.put_line('No hotels found in '||in_state||' state.');
End ReportHotelsInState;



-- FUNCTION to find a hotel's ID given the Hotel's Name
CREATE OR REPLACE FUNCTION returnHotelID (hotelQuery IN VARCHAR2)
    RETURN INTEGER
IS

findHotelID INTEGER;

BEGIN
    SELECT hotelBranchID INTO findHotelID
    FROM hotel
    WHERE hotel.hotelName = hotelQuery;

    RETURN findHotelID;
END;

--<MakeReservation>--
CREATE OR REPLACE PROCEDURE MakeReservation (fName IN VARCHAR, lName IN VARCHAR, hotelInput IN VARCHAR, roomRequest IN VARCHAR, checkInDate IN DATE, checkOutDate IN DATE, reservationDate IN DATE)
IS

vacantRoom INTEGER := 0; -- ROOM NUMBER
requestedHotel INTEGER := 0; -- HOTEL OF ROOM
generatedRoom INTEGER := 0; -- ROOM ID

requestCustomer INTEGER := 0; -- CUSTOMER ID

checkHotelStatus VARCHAR2(100) := 'DEFAULT';

calcRoomRate INTEGER := 0; -- ROOM RATE CALCUATION
calcDiscount INTEGER := 0; -- DISCOUNT RATE CALCUATION

findHotelID INTEGER := returnHotelID(hotelInput); -- MATCH THE HOTEL NAME WITH HOTEL ID

onSeasonStart DATE := TO_DATE('2020-09-01','YYYY-MM-DD');
onSeasonEnd DATE := TO_DATE('2020-04-01','YYYY-MM-DD');

invalid_hotel_id EXCEPTION; -- INVALID HOTEL
invalid_date_range EXCEPTION; -- INVALID DATE ORDER
hotel_is_sold EXCEPTION; -- HOTEL HAS BEEN SOLD

--Stores all rooms with the matching room type
CURSOR findRooms
IS
    SELECT *
    FROM reservations
    RIGHT JOIN rooms
    ON reservations.roomid = rooms.roomid
    WHERE rooms.roomtype = roomRequest
    AND rooms.hotelBranchID = findHotelID;
    
    /*  -- DATA STORED IN CURSOR --
        SELECT *
        FROM p_reservations
        RIGHT JOIN p_rooms
        ON p_reservations.roomid = p_rooms.roomid
        WHERE p_rooms.roomtype = 'Single'
        AND p_rooms.hotelBranchID = 1;
    */

roomRow findRooms%rowtype;

BEGIN
    
    IF checkIndate > checkOutDate THEN --User inputs dates in the the wrong order
        RAISE invalid_date_range;
    END IF;
    
    SELECT hotelStatus INTO checkHotelStatus
    FROM hotel
    WHERE findHotelID = hotelBranchID;
    
    IF checkHotelStatus LIKE 'Sold' THEN
        RAISE hotel_is_sold;
    END IF;
    
    -- Rate Calculation for Single room
    IF roomRequest LIKE 'Single' THEN
        IF checkInDate <= onSeasonStart AND checkInDate >= onSeasonEnd THEN
            calcRoomRate := 300;
        ELSE
            calcRoomRate := 100;
        END IF;
    END IF;
    
    -- Rate Calculation for Double room
    IF roomRequest LIKE 'Double' THEN
        IF checkInDate <= onSeasonStart AND checkInDate >= onSeasonEnd THEN
            calcRoomRate := 500;
        ELSE
            calcRoomRate := 200;
        END IF;
    END IF;
    
    -- Rate Calculation for Suite room
    IF roomRequest LIKE 'Suite' THEN
        IF checkInDate <= onSeasonStart AND checkInDate >= onSeasonEnd THEN
            calcRoomRate := 900;
        ELSE
            calcRoomRate := 500;
        END IF;
    END IF;
    
    -- Rate Calculation for Suite room
    IF roomRequest LIKE 'Conference' THEN
        IF checkInDate <= onSeasonStart AND checkInDate >= onSeasonEnd THEN
            calcRoomRate := 5000;
        ELSE
            calcRoomRate := 1000;
        END IF;
    END IF;
    
    IF MONTHS_BETWEEN(checkInDate, reservationDate)>= 2 THEN
        calcDiscount := calcRoomRate / 10;
    END IF;

    --Find a vacant room w/ matching room type in a specfic Hotel
    FOR roomRow IN findRooms
        LOOP
            IF roomRow.resID IS NULL THEN
                --dbms_output.put_line(roomRow.roomNum);
                vacantRoom := roomRow.roomNum;
                --dbms_output.put_line(roomRow.hotelBranchID);
                requestedHotel := roomRow.hotelBranchID;
                EXIT;
            END IF;
        END LOOP;
    
    --Find the vacant room's ID
    SELECT roomID INTO generatedRoom
    FROM rooms
    WHERE hotelbranchid = findHotelID AND roomnum = vacantRoom;
    
    --dbms_output.put_line(generatedRoom);

    --Find the pre existing customer in the customer table
    SELECT customerID INTO requestCustomer
    FROM customer
    WHERE firstName = fName AND lastName = lName;
    
    --dbms_output.put_line(requestCustomer);
    
    INSERT INTO reservations
    VALUES (resid.nextval, reservationDate, checkInDate, checkOutDate, calcRoomRate, 0, calcDiscount, requestCustomer, generatedRoom);
    
    DBMS_OUTPUT.PUT_LINE('A Reservation for ' || fName || ' ' || lName || ' has been created.');
    
    EXCEPTION
        WHEN invalid_date_range THEN
            DBMS_OUTPUT.PUT_LINE('The dates for the reservation are impossible');
        WHEN hotel_is_sold THEN
            DBMS_OUTPUT.PUT_LINE('Hotel has been sold. Please Select another Hotel.'); 
    
END;

--<FindReservation>--
create or replace PROCEDURE FindReservation (fName IN VARCHAR, lName IN VARCHAR, checkIn IN DATE, checkOut IN DATE)
IS

requestCustomer INTEGER := 0;
requestRes INTEGER := 0;

customer_not_found EXCEPTION; -- Could not find customer
res_not_found EXCEPTION; -- Could not find a matching reservation

BEGIN

    SELECT customerID INTO requestCustomer
    FROM customer
    WHERE firstName = fName AND lastName = lName;

    SELECT resid INTO requestRes
    FROM reservations
    LEFT JOIN rooms
    ON reservations.roomid = rooms.roomid
    WHERE reservations.customerid = requestCustomer
    AND reservations.checkInDate = checkIn
    AND reservations.checkOutDate = checkOut;

    /*
    -- DATA RETURNED FROM SELECT --
    SELECT resid
    FROM p_reservations
    LEFT JOIN p_rooms
    ON p_reservations.roomid = p_rooms.roomid
    WHERE p_reservations.customerid = 1;
    */

    IF requestCustomer = 0 THEN
        RAISE customer_not_found;
    END IF;

    IF requestRes = 0 THEN
        RAISE res_not_found;
    END IF;

    DBMS_OUTPUT.PUT_LINE('Customer Reservation ID: ' || requestRes);

    EXCEPTION
        WHEN customer_not_found THEN
            DBMS_OUTPUT.PUT_LINE('The Customer could not be found'); 
        WHEN res_not_found THEN
            DBMS_OUTPUT.PUT_LINE('a Reservation w/ that criteria for that Customer could not be found');
END;

--<FindReservation1>-- (a function to find a reservation)
create or replace Function FindReservation1 (fName IN VARCHAR, lName IN VARCHAR, checkIn IN DATE, checkOut IN DATE) Return Integer
IS

requestCustomer INTEGER := 0;
requestRes INTEGER := 0;

customer_not_found EXCEPTION; -- Could not find customer
res_not_found EXCEPTION; -- Could not find a matching reservation

BEGIN

    SELECT customerID INTO requestCustomer
    FROM customer
    WHERE firstName = fName AND lastName = lName;

    SELECT resid INTO requestRes
    FROM reservations
    LEFT JOIN rooms
    ON reservations.roomid = rooms.roomid
    WHERE reservations.customerid = requestCustomer
    AND reservations.checkInDate = checkIn
    AND reservations.checkOutDate = checkOut;

    /*
    -- DATA RETURNED FROM SELECT --
    SELECT resid
    FROM p_reservations
    LEFT JOIN p_rooms
    ON p_reservations.roomid = p_rooms.roomid
    WHERE p_reservations.customerid = 1;
    */

    IF requestCustomer = 0 THEN
        RAISE customer_not_found;
    END IF;

    IF requestRes = 0 THEN
        RAISE res_not_found;
    END IF;

    return requestRes;

    EXCEPTION
        WHEN customer_not_found THEN
            DBMS_OUTPUT.PUT_LINE('The Customer could not be found'); 
        WHEN res_not_found THEN
            DBMS_OUTPUT.PUT_LINE('a Reservation w/ that criteria for that Customer could not be found');
END;

--<CancelReservation>--
create or replace PROCEDURE CancelReservation (fName IN VARCHAR, lName IN VARCHAR, roomClass IN VARCHAR)
IS

CURSOR cancelRes
IS
    SELECT * 
    FROM customer
    INNER JOIN reservations
    ON customer.customerid = reservations.customerid
    INNER JOIN rooms
    ON reservations.roomid = rooms.roomid;

cancelRows cancelRes%rowType;

residQuery INTEGER;

res_cancelled_already EXCEPTION; 

BEGIN

    FOR cancelRows IN cancelRes
        LOOP
            IF cancelRows.firstName = fName AND cancelRows.lastName = lName AND cancelRows.roomType = roomClass THEN
                    IF cancelRows.resCancel = 1 THEN
                        RAISE res_cancelled_already;
                    END IF;
                residQuery := cancelRows.resid;
            END IF;
        END LOOP;

    UPDATE reservations
    SET resCancel = 1
    WHERE reservations.resid = residQuery;

    DBMS_OUTPUT.PUT_LINE('ReservationID: ' || residQuery || ' was cancelled.' );

    EXCEPTION
        WHEN res_cancelled_already THEN
            DBMS_OUTPUT.PUT_LINE('This Reservation has already been cancelled!');

END;

--<ShowCancelations>--
create or replace PROCEDURE ShowCancelations
IS

cancelHotelName VARCHAR(255);
cancelHotelLocation VARCHAR(255);

CURSOR cancelCursor
IS
SELECT *
FROM customer
INNER JOIN reservations
ON customer.customerID = reservations.customerID
INNER JOIN rooms
ON reservations.roomID = rooms.roomID;

resRow cancelCursor%rowtype;
cancelCounter INTEGER := 0;
no_cancellations EXCEPTION; -- NO CANCELLED RESERVATIONS IN DATABASE

BEGIN
	DBMS_OUTPUT.PUT_LINE('Cancelled Reservations');
	DBMS_OUTPUT.PUT_LINE('----------------------');
	FOR resRow IN cancelCursor
    	LOOP
        	cancelCounter := cancelCounter + 1;
        	IF resRow.resCancel = 1 THEN
            	DBMS_OUTPUT.PUT_LINE('ReservationID: ' || resRow.resID);
            	DBMS_OUTPUT.PUT_LINE('Customer: ' || resRow.firstName || ' ' || resRow.lastName);
            	DBMS_OUTPUT.PUT_LINE('Room Type: ' || resRow.roomType);
            	DBMS_OUTPUT.PUT_LINE('Reservation Date: ' || resRow.resDate);
            	DBMS_OUTPUT.PUT_LINE('Check In Date: ' || resRow.checkInDate);
            	DBMS_OUTPUT.PUT_LINE('ReservationID: ' || resRow.checkOutDate);

            	SELECT hotelName INTO cancelHotelName
            	FROM hotel
            	WHERE hotelbranchid = resRow.hotelBranchid;

            	SELECT state_ INTO cancelHotelLocation
            	FROM hotel
            	WHERE hotelbranchid = resRow.hotelBranchid;

            	DBMS_OUTPUT.PUT_LINE('Hotel Name: ' || cancelHotelName);
            	DBMS_OUTPUT.PUT_LINE('Hotel Location: ' || cancelHotelLocation);
            	DBMS_OUTPUT.PUT_LINE('');
        	END IF;
    	END LOOP;

    	IF cancelCounter = 0 THEN
        	RAISE no_cancellations;
    	END IF;

    	EXCEPTION
        	WHEN no_cancellations THEN
            	DBMS_OUTPUT.PUT_LINE('No Cancelled Reservations');    
END;





--10)
--change reservation date
create or replace procedure changeReservationDate (firstName IN VARCHAR, lastName IN VARCHAR, newStart date, newEnd date, oldStart date, oldEnd date)
AS

resID integer := FindReservation1(firstName, lastName, oldStart, oldEnd);

cursor reservation 
    IS
    select resid, resdate, checkindate, checkoutdate
    from reservations
    where reservations.resid = resid;

res_row reservation%ROWTYPE;
oldInDate Date;
oldOutDate Date;
newInDate Date := newStart;
newOutDate Date := newEnd;
newResDate Date;



BEGIN
open reservation;
fetch reservation into res_row;

oldindate := res_row.checkindate;
dbms_output.put_line('The old check-in date is: '||oldindate);

oldOutDate := res_row.checkoutdate;
dbms_output.put_line('The old check-in date is: '||oldOutDate);
dbms_output.put_line('');

dbms_output.put_line('Choose a new check-in date: ');
newInDate := TO_DATE(newStart);
dbms_output.put_line('The new check-in date is: ' ||newindate);

newOutDate := TO_DATE(newEnd);
dbms_output.put_line('The new check-in date is: ' ||newoutdate);
dbms_output.put_line('');

update reservations
set resdate = sysdate, 
    checkindate = newStart,
    checkoutdate = newEnd
    where resid = res_row.resid;


dbms_output.put_line('The new dates are: ');
dbms_output.put_line('The new reservation date is: ' ||newResDate);
dbms_output.put_line('The new check-in date is: '||newInDate);
dbms_output.put_line('The new check-out date is: '||newOutDate);

END;


--11)
--change reservation room type
create or replace procedure changereservationroomtype (firstname in varchar2, lastname in varchar2, roomtype varchar2)
as

cursor reservation 
    IS
    select *
    from reservations
    join rooms
    on reservations.roomid = rooms.roomid
    where reservations.resid = resid;

    
res_row reservation%rowtype;
currid number;
croom_id number;
curr_room varchar2(20);
new_room varchar2(20);

    
begin    
for i in (select *
    from reservations
    join rooms
    on reservations.roomid = rooms.roomid
    where reservations.resid = resid
    and rooms.roomtype = 'double')
    loop

dbms_output.put_line('The current res id is: ' ||i.resid);
dbms_output.put_line('The current room type is: ' ||i.roomtype);

new_room := roomtype;

    
    update rooms
    set rooms.roomtype = new_room
    where roomid = res_row.resid;


dbms_output.put_line('');    
dbms_output.put_line('The new room type is: ' ||res_row.roomtype);
end loop;
end;

--12)
--hotel reservation
create or replace procedure hotelRes (hotel_id number) AS
      
hotel_row hotel%rowtype;
hotelid number;
hotel_name varchar2(100);
h_single number;
h_double number;
h_suite number;
h_conf number;
invalid_id EXCEPTION;

BEGIN
if hotel_id <= 0 then raise invalid_id;
else
select * into hotel_row
from hotel
where hotel.hotelbranchid = hotel_id;
dbms_output.put_line('The hotel id is: ' || hotel_row.hotelbranchid);
dbms_output.put_line('The hotel name is: ' || hotel_row.hotelname);


select count(*) into h_single
from rooms
where roomtype = 'single';
if h_single > 0
then dbms_output.put_line('The number of booked singles rooms: ' || h_single);
else dbms_output.put_line('There are no booked single rooms');
end if;

select count(*) into h_double
from rooms
where roomtype = 'double';
if h_double > 0
then dbms_output.put_line('The number of booked doubles rooms: ' || h_double);
else dbms_output.put_line('There are no booked double rooms');
end if;

select count(*) into h_suite
from rooms
where roomtype = 'suite';
if h_suite > 0
then dbms_output.put_line('The number of booked suite rooms: ' || h_suite);
else dbms_output.put_line('There are no booked suite rooms');
end if;

select count(*) into h_conf
from rooms
where roomtype = 'conference';
if h_conf > 0
then dbms_output.put_line('The number of booked conference rooms: ' || h_conf);
else dbms_output.put_line('There are no booked conference rooms');
end if;
end if;

EXCEPTION
    when no_data_found
    then dbms_output.put_line('Enter a valid hotel id');

    when invalid_id
    then dbms_output.put_line('Enter a hotel id above 0');
    

END;

--13)
--guest reservation

create or replace procedure showguestres (firstname in varchar2, lastname in varchar2)
AS

customerfirst varchar2(50) := firstName;
customerlast varchar2(50):= lastName;
res_date date;
check_in date;
check_out date;
room_rate number;
room_id number;
invalidcustomer exception;

BEGIN
for i in (select *
    from reservations 
    join rooms
    on reservations.roomid = rooms.roomid
    full join customer
    on reservations.customerid = customer.customerid
    where customer.firstname = customerfirst
    and customer.lastname = customerlast) 
loop

dbms_output.put_line('Customer name is: ' || i.firstname || ' '|| i.lastname);
dbms_output.put_line('The date reserved is: ' || i.resdate);
dbms_output.put_line('The check-in date is: ' || i.checkindate);
dbms_output.put_line('The check-out date is: ' || i.checkoutdate);
dbms_output.put_line('The room rate is: ' ||i.roomrate);
dbms_output.put_line('The room type is: ' || i.roomtype);
dbms_output.put_line('');
end loop;


EXCEPTION
when invalidcustomer then dbms_output.put_line('Enter a valid customer');
when no_data_found then dbms_output.put_line('That customer does not exist');

END;

--14)
create or replace procedure monthlyincomereport
as
totalincome number;
totalserviceinc number;
totalroominc number;
singleinc number;
doubleinc number;
suiteinc number;
conferenceinc number;
laundryinc number;
restaurantinc number;
ppvinc number;
curr_month date;

BEGIN
for i in 1..12
loop

dbms_output.put_line('The income by room type for'|| curr_month);
--gets total single room income
select sum(roomcost) into singleinc
from invoice
join reservations
on invoice.resid = reservations.resid
where roomrate between 90 and 100
and extract (month from reservations.checkindate) = i;

dbms_output.put_line('The total single room income is: $' ||singleinc);

--gets total double room income
select sum(roomcost) into doubleinc
from invoice
join reservations
on invoice.resid = reservations.resid
where roomrate between 180 and 200
and extract (month from reservations.checkindate) = i;
dbms_output.put_line('The total double room income is: $' ||doubleinc);

--gets total suite room income
select sum(roomcost) into suiteinc
from invoice
join reservations
on invoice.resid = reservations.resid
where roomrate between 450 and 500
and extract (month from reservations.checkindate) = i;

dbms_output.put_line('The total suite room income is: $' ||suiteinc);

--gets total conference room income
select sum(roomcost) into conferenceinc
from invoice
join reservations
on invoice.resid = reservations.resid
where roomrate between 4500 and 5000
and extract (month from reservations.checkindate) = i;

dbms_output.put_line('The total conference room income is: $' ||conferenceinc);

dbms_output.put_line('');
--dbms_output.put_line('The income by service type for '|| );
--gets service income for laundry
select sum(laundrycost) into laundryinc
from invoice
join reservations
on invoice.resid = reservations.resid
and extract (month from reservations.checkindate) = i;

dbms_output.put_line('The total laundry income is: $' ||laundryinc);

--gets service income for restaurant
select sum(foodOrderCost) into restaurantinc
from invoice
join reservations
on invoice.resid = reservations.resid
and extract (month from reservations.checkindate) = i;

dbms_output.put_line('The total restaurant income is: $' ||restaurantinc);

--gets service income for pay-per-view
select sum(payperview) into ppvinc
from invoice
join reservations
on invoice.resid = reservations.resid
and extract (month from reservations.checkindate) = i;

dbms_output.put_line('The total pay-per-view income is: $' ||ppvinc);
dbms_output.put_line('');

end loop;





--15)
create or replace PROCEDURE AddServiceToReservation (fname in varchar, lname in varchar, checkIn in date, checkOut in date, inputServ in varchar, servDate in Date) AS


resValue integer:= findReservation1(fname, lname, checkIn, checkOut);

CURSOR findID_cursor IS
SELECT c.customerID, h.hotelbranchID
FROM customer c, Hotel h, reservations r, rooms ro
WHERE r.resID = resValue 
AND r.customerID = c.customerID
AND r.roomID = ro.roomID
AND ro.hotelBranchID = h.hotelBranchID;

k_row findID_cursor%rowtype;

BEGIN
FOR k_row IN findID_cursor
LOOP


        -- if service input is one of the available services move forward else invalid msg
            IF (inputServ = 'Laundry' Or inputServ = 'Room Service' Or inputServ = 'Food Order' OR inputServ = 'Spa') THEN 
        -- insert all values to service table
                INSERT INTO Services VALUES (servicesID.nextval, inputServ, TO_DATE(servDate,'DD-MON-RR'), k_row.customerID, k_row.hotelBranchID, resValue);
		dbms_output.put_line('Service Successfully Added to Reservation');
        ELSE
            dbms_output.put_line('Invalid Service Input');
            -- Invalid Message Output
        END IF;
    END LOOP;
END;

--16)
create or replace PROCEDURE ListReservationService (fname in varchar, lname in varchar, ckIn in date, ckOut in date)IS 

resValue number := findReservation1(fname, lname, ckIn, ckOut);

CURSOR listServ_cursor IS
SELECT s.servicesID, s.typeofservice, s.daterequested, s.resID
FROM services s
WHERE s.resID = resValue;
-- Create cursor with all service elements required

s_row listServ_cursor%rowtype;
-- Assign cursor to variable
counter321 number;
--counter to check reservations existance
BEGIN
counter321 := 0; 
-- assign default value of 0 to counter
FOR s_row IN listServ_cursor
LOOP

Dbms_output.put_line('Service ID:'|| s_row.servicesID||'  Types of Service:'|| 
s_row.typeofservice||'  Date Requested:  '||s_row.daterequested||'  Reservation ID:  ' ||s_row.resID);
-- Iterate over every row of cursor and output information

counter321 := counter321 + 1;
--add one to counter for every row in cursor
END LOOP;

IF ( counter321 = 0 ) THEN
    Dbms_output.put_line('There are no services for that Reservation ID');
END IF;
--if counter is still at default value then for loop was never engaged, meaning the input doesnt exist

END;



-- 17)
CREATE OR REPLACE PROCEDURE ShowServiceReport (userInput1 in varchar)
IS CURSOR showServ_cursor IS
SELECT r.resID, r.resdate, r.checkindate, r.checkoutdate, 
r.discountapplied, r.customerID, r.roomID
from reservations r, services s
WHERE r.resID=s.resID and s.typeofservice = userInput1;
-- Create cursor will all reservation elements
ss_row showServ_cursor%rowtype;
-- Assign cursor to variable
counter456 number;
--counter to check reservations existance
BEGIN
counter456 := 0; 
-- assign default value of 0 to counter
FOR ss_row IN showServ_cursor
LOOP

Dbms_output.put_line('Reservation ID:'|| ss_row.resID||'  Reservation Date '|| 
ss_row.resdate||'  Check In Date:  '||ss_row.checkindate||'  Check Out Date  ' ||ss_row.checkoutdate || '   Discount Applied?  '|| ss_row.discountapplied||' Customer ID  '||ss_row.customerID|| '  Room ID '||ss_row.roomID);
-- iterate over every row of cursor and output info
counter456 := counter456 + 1;
--add one to counter for every row in cursor
END LOOP;
IF ( counter456 = 0 ) THEN
    Dbms_output.put_line('There are no reservations that have that service');
END IF;
--if counter is still at default value then for loop was never engaged, meaning the input doesnt exist
END;

-- 18)
create or replace PROCEDURE TotalServiceIncomeRep (hotelName in VARCHAR)IS 
CURSOR TotalIncome_cursor IS
select i.laundryCost, i.foodOrderCost, i.payperview, i.resID
from invoice i, reservations r, rooms ro, Hotel hb
Where i.resID = r.resID AND
r.roomID = ro.roomID AND
ro.hotelBranchID = hb.hotelBranchID AND
hb.hotelName = HotelName;

-- Create cursor will service invoice information
-- Joined Res_id, room_id, hotelbranch_id


Hotelincome_row TotalIncome_cursor%rowtype;
--assign cursor to a variable
Counter123 number;
--counter for total service income
CounterHotel number;
--counter to check if hotel input is valid
BEGIN
Counter123 := 0;
CounterHotel := 0;
-- counters set to 0
FOR Hotelincome_row IN TotalIncome_cursor
--iterate over cursor
LOOP
Counter123 := counter123 + Hotelincome_row.laundrycost + Hotelincome_row.foodOrderCost + Hotelincome_row.payperview;
-- counter equals itself plus cursor's current laundrycost value for every row of cursor
CounterHotel := CounterHotel + 1;
END LOOP;
IF ( CounterHotel = 0 ) THEN
    Dbms_output.put_line('Invalid Hotel Input');
    --if counter is still at default value then for loop was never engaged, meaning the input doesnt exist
ELSE
Dbms_output.put_line('The total service income received at hotel ' || hotelName|| ' is: ' || counter123);
-- Output
END IF;
END;





-- 19) 
Set Serveroutput ON;
--Creation of Procedure
create or replace procedure ShowAvlRooms (hotel_name2 IN VARCHAR)AS
 
hotel_row hotel%rowtype;
HotelID Number;
hotel_rooms NUMBER;
hotel_singles NUMBER;
hotel_doubles NUMBER;
hotel_suites NUMBER;
hotel_conf NUMBER;
invalidID EXCEPTION;
 
 
begin

select hotelBranchID into hotelID 
    from hotel
    where hotelName = hotel_name2;

if HotelID <= 0 then raise invalidID;
else
select count(roomID) into hotel_rooms from rooms
where hotelID = rooms.hotelbranchID;
dbms_output.put_line('Total rooms located in this hotel: ' || hotel_rooms);

select count(roomID) into hotel_singles from rooms
where HotelID = rooms.hotelbranchID AND roomType = 'Single';
dbms_output.put_line('Total single rooms located in this hotel: ' || hotel_singles);

select count(roomID) into hotel_doubles from rooms
where HotelID = rooms.hotelbranchID AND roomType = 'Double';
dbms_output.put_line('Total double rooms located in this hotel: ' || hotel_doubles);

select count(roomID) into hotel_suites from rooms
where HotelID = rooms.hotelbranchID AND roomType = 'Suite';
dbms_output.put_line('Total double rooms located in this hotel: ' || hotel_suites);

select count(roomID) into hotel_conf from rooms
where HotelID = rooms.hotelbranchID AND roomType = 'Conference';
dbms_output.put_line('Total double rooms located in this hotel: ' || hotel_conf);
end if;

Exception
when no_data_found then
	dbms_output.put_line('No Rooms available'); 
when invalidID then
dbms_output.put_line('Enter a Hotel ID greater then 0.');
end;

--exec ShowAvlRooms('H4');

--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
--20) 
Set Serveroutput ON;
--Creation of Procedure and Cursor
create or replace procedure RoomCheckoutReport (first_name IN VARCHAR2, last_name IN VARCHAR2)IS


first_Name1 VARCHAR(50);
last_Name1 VARCHAR(50);
room_ID Number;
room_Rate Number;
discount_Applied Number;
invoice_Total Number;
ReservationID Number;
customer_id Number;
invoice_id Number;
invalidID exception;


cursor checkout is
--Select statement of required variables
Select firstName, lastName, roomID, roomRate, discountApplied, InvoiceTotal
from Customer, Reservations, Invoice
--Error cheking to make sure that only entries are shown from the ID input
where customer_ID = reservations.customerID AND reservations.resid = invoice.resid AND Customer.customerid = invoice.customerid;
checkout_row reservations%rowtype;

begin

select customerID into customer_id 
    from customer
    where first_name = firstName AND last_name = lastName;
    
--select invoiceID into invoice_id
   -- from invoice
    --where invoice.customerID = customerID;

--select invoice.resID into ReservationID from
--invoice
--where Invoice_ID = invoice.invoiceID; 


for checkout_row in checkout
--Loop that will continue to show all reports for given reservation ID.
loop
dbms_output.put_line('----------------------------------------------------');
dbms_output.put_line('Room checkout Report:');
dbms_output.put_line('First Name: ' || checkout_row.firstName);
dbms_output.put_line('Last Name: ' || checkout_row.lastName);
dbms_output.put_line('Room Number: ' || checkout_row.roomID);
dbms_output.put_line('Daily Room Rate: $' || checkout_row.roomRate);
dbms_output.put_line('Discount Applied: $' || checkout_row.discountApplied);
dbms_output.put_line('Invoice Total: $' || checkout_row.InvoiceTotal);
dbms_output.put_line('----------------------------------------------------');
--Header that sits at the top of report
--dbms_output.put_line('----------------------------------------------------');
--dbms_output.put_line('Room checkout Report:');
--select firstName into first_name1 from customer
--where customer_ID = customerID;
--dbms_output.put_line('First Name: ' || first_Name);
--select lastName into last_name1 from customer
--where customer_ID = customerID;
--dbms_output.put_line('Last Name: ' || last_Name);
--select roomID into room_ID from reservations
--where invoice_ID = reservations.invoiceID;
--dbms_output.put_line('Room Number: ' || room_ID);
--select roomRate into room_rate from reservations
--where reservationID = reservations.resID;
--dbms_output.put_line('Daily Room Rate: $' || room_Rate);
--select discountApplied into discount_applied from reservations
--where reservationID = reservations.resID;
--dbms_output.put_line('Discount Applied: $' || discount_Applied);
--select InvoiceTotal into invoice_total from invoice
--where invoice.resID = reservationID;
--dbms_output.put_line('Invoice Total: $' || Invoice_Total);
--dbms_output.put_line('----------------------------------------------------');
end loop;


--Exception 
--when invalidID then
--dbms_output.put_line('Enter a valid set of State Initials.');

end;



--Exec RoomCheckoutReport('Mary', 'Wise');

--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
--21) 
Set Serveroutput ON;
--Creation of Procedure and Cursor
create or replace procedure IncomeByStateReport (stateID IN VARCHAR)IS

cursor stateReport is
--Select statement of required variables
Select state_, invoiceID, laundryCost, foodOrderCost, payperview, roomCost, InvoiceTotal
from Hotel, Invoice
Where hotel.state_ = stateID AND hotel.hotelbranchID = invoice.hotelBranchID;
stateReport_row invoice%rowtype;
invoice_row invoice%rowtype;
state_income Number;
invalidID exception;

begin
dbms_output.put_line('Income By State Report:');
dbms_output.put_line('State: ' || stateID);
select sum(InvoiceTotal) into state_income from invoice, hotel
where invoice.hotelBranchID = hotel.hotelBranchID AND StateID = hotel.state_;
dbms_output.put_line('Total Income:' || state_income);
dbms_output.put_line('--------------------------------------------------------------');
dbms_output.put_line('Invoice Breakdown:');


for stateReport_row in stateReport
--Loop that will continue to show all reports for given State Initials.
loop
--Header that sits at the top of report
dbms_output.put_line('--------------------------------------------------------------');
dbms_output.put_line('Invoice: ' || stateReport_row.invoiceID);
dbms_output.put_line('Laundry Cost: ' || stateReport_row.laundryCost);
dbms_output.put_line('Food Cost: ' || stateReport_row.foodOrderCost);
dbms_output.put_line('PayPerView Cost: ' || stateReport_row.payperview);
dbms_output.put_line('Room Cost: ' || stateReport_row.roomCost);
dbms_output.put_line('Total Income from invoice: ' || stateReport_row.InvoiceTotal);
dbms_output.put_line('--------------------------------------------------------------');

end loop;

Exception
when no_data_found then
	dbms_output.put_line('No Income available'); 
when invalidID then
dbms_output.put_line('Enter a valid set of State Initials.');
end;

--Exec IncomeByStateReport('MD');


